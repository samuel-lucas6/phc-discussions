phc-discussions - Re: [PHC] Specification of a modular crypt format

Message-ID: <CA+hr98GRfkdPhT1MHksOnMzBrLLfWHTCTUKJLYZmpVEYAAoTtA@mail.gmail.com>
Date: Thu, 17 Sep 2015 10:09:31 +0200
From: Krisztián Pintér <pinterkr@...il.com>
To: "discussions@...sword-hashing.net" <discussions@...sword-hashing.net>
Subject: Re: [PHC] Specification of a modular crypt format

On Wed, Sep 16, 2015 at 8:35 PM, Thomas Pornin <pornin@...et.orgwrote:
"deterministic". Having a deterministic encoding makes parsing a bit
easier,

in general, yes, but in particular with the encoding of integer
values, it is easier to parse 001 than to reject it. rejecting will
need special testing to not accept leading zeros. if we go for
deterministic encoding, i would suggest either not having real numbers
at all, or having only fixed points. deterministic encoding of a
floating point is a nightmare.

deterministic encoding helps with compare, might help with testing,
but makes the parser somewhat more complex.

another note: a middle ground option would be to standardize the
string in the strict way, but not require parsers to fail if they are
able to make sense of it, but does not conform to the rules. i.e. if a
software produces 001, it is incorrect. but a parser might or might
not parse 001, both are ok. if it parses, it must parse to 1
obviously.


to invoke the decoder with a list of parameters to expect; if the rule
is per function, then the decoder must be invoked with an _ordered_ list
of parameters.

i'm not aware of any usual structure for handing a list of strings to
a function that is not ordered.


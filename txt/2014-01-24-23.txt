phc-discussions - Re: [PHC] A silly (?) consideration for script-friendly hashes

Message-id: <357CB864-0EA8-4D78-B90C-458D56D2023F@mac.com>
Date: Fri, 24 Jan 2014 14:41:59 -0800
From: Larry Bugbee <bugbee@....com>
To: discussions@...sword-hashing.net
Subject: Re: [PHC] A silly (?) consideration for script-friendly hashes

On Jan 24, 2014, at 2:29 PM, Andy Lutomirski <luto@...capital.netwrote:
On Fri, Jan 24, 2014 at 2:20 PM, Larry Bugbee <bugbee@....comwrote:
>On Jan 24, 2014, at 2:17 PM, Andy Lutomirski <luto@...capital.netwrote:
>>On Fri, Jan 24, 2014 at 2:16 PM, Larry Bugbee <bugbee@....comwrote:
>>>On Jan 24, 2014, at 2:13 PM, Andy Lutomirski <luto@...capital.netwrote:
>>>
>>>>just hash the domain in
>>>>with the salt before using it to hash a password
>>>
>>>Good idea, but why not also add userid?
>>>
>>>
>>
>>Because then you need some kind of trusted input so that scripts can't
>>just fake the userid.
>
>Sorry, and perhaps I'm dense, but I don't see why that's a problem.
>

If the API is Hash(userid, domain, salt, password), then the browser
can only really verify "domain".  How is it going to check that
"userid" is correct?

Why would it need to if it knew the userid fm the login fields?  Perhaps we are talking abut two different problems?  

I was thinking the kitten processors would be working on new dictionaries and adding the domain to the hash which would be a good way to cause the attacker to have to generate a fresh set of dictionaries for each site.  Fine, but if you add userid (converted to lower/upper case to avoid server mismatches) to the hash they would need a dictionary for each user at that site.  ...or at a minimum, they would have to discover the userid for the victim.  

Are you thinking of a different use case?


--Andy

>
>>At that point, you might as well try to use a
>>protocol like SRP instead.
>>
>>--Andy
>



-- 
Andy Lutomirski
AMA Capital Management, LLC



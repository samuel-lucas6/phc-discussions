phc-discussions - PHC output specifics

Message-ID: <BY2PR03MB55480E5A6D9C34F8AD12495A71E0@BY2PR03MB554.namprd03.prod.outlook.com>
Date: Wed, 4 Mar 2015 19:12:43 +0000
From: Marsh Ray <maray@...rosoft.com>
To: "' (discussions@...sword-hashing.net)'" <discussions@...sword-hashing.net>
Subject: PHC output specifics

I posted this to the panel list, but we’d like to move the discussion here.

At the same time I’d like to clarify: Where I listed three specific knobs, I was not so much trying to specify the behavior of the function and just give examples. Different functions will have different knobs as appropriate, but it’s important that we think in terms of physical units of the defender’s hardware.


-          Marsh

From: Marsh Ray [mailto:maray@...rosoft.com]
Sent: Monday, March 2, 2015 11:48 AM


Obviously the most important thing is the selection of the algorithm. But in practice there are lots of other ways users of password hashing algorithms can get pwned too.

So I’d like to reiterate my desire for the PHC to produce:


·         One winning function.

·         A standard C language API definition. Could be separate ‘create’ and ‘verify’ functions.

·         A recommendation for string encoding (e.g., UTF-8 code points)

·         A standalone credential (hash value, salt, metadata, etc) format. Probably this would be binary with a standard Base64 encoding.

·         A minimal number of knobs to turn for the defender to a) fit the algorithm to their hardware, and to b) fit it to their work factor budget.

·         Conservative recommended default values for these parameters and advice on other reasonable choices.

I see two or three knobs here, max.

·         Total memory consumption

·         Total CPU consumption

·         Total memory bus operations.

The first two parameters are probably best expressed logarithmically. The third, I’m not so sure.

If we don’t define these things, other people will. Lots of other people, incompatibly, and hilarity will ensue. ☺


-          Marsh





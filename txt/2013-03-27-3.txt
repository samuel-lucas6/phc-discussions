phc-discussions - Re: [PHC] Re: Suggestion: API should include a verifier function

Message-ID: <CACsn0c=uZ8sAh=wZs-2HLk+m-w157AV4+1ML36ZmNmCZntWmGw@mail.gmail.com>
Date: Wed, 27 Mar 2013 09:15:44 -0400
From: Watson Ladd <watsonbladd@...il.com>
To: discussions@...sword-hashing.net
Subject: Re: [PHC] Re: Suggestion: API should include a verifier function

This isn't necessary: a non-constant time comparison at worst reveals the
hash, which doesn't give an attacker
enough information to break a password anyway if we do our jobs right.


On Tue, Mar 26, 2013 at 11:08 PM, Tony Arcieri <tony.arcieri@...il.com>wrote:

On Tue, Mar 26, 2013 at 7:57 PM, Tony Arcieri <tony.arcieri@...il.com>wrote:
>
>you'd provide a user-supplied one as input, and verify via a guaranteed
>constant time comparison whether or not it's correct.
>>
>
Oops, not quite what I meant to say there, but I'm sure you got the idea ;)
>
To clarify: you would pass in the hash/salt "on file" along with the
alleged password, and the function would return whether or not the provided
password matches the supplied hash/salt. The arguments are, otherwise, the
same as the hashing function.
>
As an API strawman, if this is our hashing function:
>
    PHS(out, outlen, in, inlen, salt, saltlen, t_cost, m_cost)
>
we might consider:
>
   PHS_VERIFY(hash, hashlen, in, inlen, salt, saltlen, t_cost, m_cost)
>
(I'm not particularly married to the name "PHS_VERIFY", so please bikeshed
away ;)
>
--
Tony Arcieri
>



-- 
"Those who would give up Essential Liberty to purchase a little Temporary
Safety deserve neither  Liberty nor Safety."
-- Benjamin Franklin




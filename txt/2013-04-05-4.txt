phc-discussions - RE: [PHC] Testing Password Hashing functions

Message-ID: <218AE73F98E99C4C98AF7D5166AA798E09077B07@TK5EX14MBXC287.redmond.corp.microsoft.com>
Date: Fri, 5 Apr 2013 16:54:22 +0000
From: Marsh Ray <maray@...rosoft.com>
To: "discussions@...sword-hashing.net" <discussions@...sword-hashing.net>
Subject: RE: [PHC] Testing Password Hashing functions

-----Original Message-----
From: Yann Droneaud [mailto:ydroneaud@...eya.com]
Sent: Friday, April 5, 2013 8:53 AM
To: discussions@...sword-hashing.net
Subject: Re: [PHC] Testing Password Hashing functions

So using the PRNG test is probably a first evaluation step, but doesn't seems
to be enough.

Agree. They're a useful sanity check.

RC4 is an example of a PRNG that wouldn't pass basic statistical tests.

https://en.wikipedia.org/wiki/Block_cipher_modes_of_operation#Counter_.28CTR.29
AES-128 in CTR mode with the key and plaintext inputs switched is a simple example of a PRNG which would pass all statistical tests and yet be completely broken.

An additional requirement of a password hashing function over a PRNG is that it require a significant amount of work to compute which no one can optimize away. I'm not sure statistical tests can help much here.

So what others tools, methods are going to be used to evaluate password
hash functions ?

My impression is that the construction of any potentially-reusable parts of the tools is so much easier than the analysis itself that it's almost a rite of passage for researchers to write their own. Unfortunately, only a few end up as open source.

There's a few at http://www.ecrypt.eu.org/tools/

Marc Stevens makes his MD5 and SHA-1 tools open source https://code.google.com/p/hashclash/

- Marsh



phc-discussions - Re: [PHC] Native server relief support for password hashing in browsers

Message-ID: <20140119225730.GA23303@openwall.com>
Date: Mon, 20 Jan 2014 02:57:30 +0400
From: Solar Designer <solar@...nwall.com>
To: discussions@...sword-hashing.net
Subject: Re: [PHC] Native server relief support for password hashing in browsers

On Mon, Jan 20, 2014 at 02:39:51AM +0400, Solar Designer wrote:
On Mon, Jan 20, 2014 at 02:28:20AM +0400, Solar Designer wrote:
That said, this may well be beyond scope of PHC (unless something
unexpectedly clever yet simple emerges), and Catena's builtin "server
relief" is only the tip of the iceberg.  It is very nice that Catena
standardizes just one hash type for both server-only and client+server
uses (without that functionality built in, it'd end up being 2+ hash
type variations), but it doesn't address the more complicated issues.

BTW, if I understood Catena's server relief design correctly, it looks
compatible with RFC 5802 (SCRAM), which I happened to have described in
my own words here (before I learned of the RFC):

http://openwall.info/wiki/people/solar/algorithms/challenge-response-authentication#Stored-on-the-server

Upon a fresh look at the RFC, this looks compatible with my own earlier
definition of the algorithm, but not with the RFC specifics.  The RFC
specifically mentions use of PBKDF2 for the slow hash, and it includes
HMACs with "Client Key" and "Server Key" strings (for mutual auth).

Yet maybe it makes sense to match RFC 5802 to the extent possible for a
PHC candidate - clearly, we won't use solely PBKDF2 for the slow hash,
but perhaps all remaining aspects may be matched to the RFC.  At first
glance, it looks like for that we only need to introduce an extra HMAC
step with a user-configurable string, "Client Key" by default.

Alexander

